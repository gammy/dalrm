#!/usr/bin/env bash
# Diox' Alarm by gammy (https://github.com/gammypoofle/dalrm.git)
# Note: Don't put anything important (rsync, etc) in the script; it's killed
#       after read_timeout
# Basic dependencies are `bash`, `pkill` and possibly the GNU variant of `date`

read_timeout=10 # Must be in seconds
 snooze_time="10 minutes"
human_format="%a%e, %H:%M:%S"

  key_quit=q
key_snooze=s
            
# Toilet settings. If the font is missing, the default will be tried.
# Some cool ones: cricket, basic, graffiti, larry3d, sblood, shadow
        figlet_font="/usr/share/figlet/cricket.flf"
 figlet_format_time="%H : %M"
figlet_format_alarm="%H : %M"

          ansi_dred="\e[31m" # red
           ansi_red="\e[1;31m" # bold + red
         ansi_green="\e[1;32m" # bold + green
        ansi_yellow="\e[1;33m" # bold + yellow
      ansi_clr_line="\e[K"
    ansi_clr_colors="\e[0m"
   ansi_save_cursor="\e[s"
ansi_restore_cursor="\e[u"

if [ -z "$BASH_VERSION" ]; then
    echo "Bash is required"! >&2
    exit 1
fi

deps=(pkill date bash grep stty)
for dep in ${deps[@]}; do
        which $dep > /dev/null || exit $?
done

print_remaining() {
    local total_seconds=$1
    local dd hh mm ss ut
    if [ $total_seconds -lt 0 ]; then
        # abs of total_seconds
        let total_seconds="$total_seconds * -1"
        local the_past_f=1
    fi

    let dd="$total_seconds / 60 / 60 / 24"
    let hh="$total_seconds / 60 / 60 % 24"
    let mm="$total_seconds / 60 % 60"
    let ss="$total_seconds % 60"

    if [ $dd -ne 0 ]; then
        ut[0]="$dd day"
        [[ $dd -gt 1 ]] && ut[0]+="s"
    fi

    if [ $hh -ne 0 ]; then
        ut[1]="$hh hour"
        [[ $hh -gt 1 ]] && ut[1]+="s"
    fi

    if [ $mm -ne 0 ]; then
        ut[2]="$mm minute"
        [[ $mm -gt 1 ]] && ut[2]+="s"
    else
        if [ $dd -eq 0 -a $hh -eq 0 ]; then
            if [ $ss -lt 1 ]; then
                ut[2]="now"
            else
                ut[2]="less than 1 minute"
            fi
        fi
    fi
 
    echo -en "${ut[@]}"
    if [ $the_past_f ]; then
        echo -en ' ago'
     fi
}

readkey() {
    local stty_old="$(stty -g)" # Store current tty settings
    stty -echo # Disable local echo
    read -N 1 -t 1 user_input
    user_input=${user_input,,} # Convert to lower-case (bash 4.0+)
    stty "$stty_old" # Restore previous tty settings
}

snoozecheck() {
    # Note: user_input is global
    local time_beg=$(date +"%s")
    local displayed=

    until [ "$user_input" = "$key_quit" -o \
            "$user_input" = "$key_snooze" ]; do
        if [ ! $displayed ]; then
            echo -en "\n[${ansi_green}q${ansi_clr_colors}] to stop, "
            echo -e "[${ansi_yellow}s${ansi_clr_colors}] to snooze"
            displayed=1
        fi

        readkey

        local time_end=$(date +"%s")
        let time_diff="$time_end - $time_beg"
        if [ $time_diff -ge $read_timeout ]; then
            break
        fi
    done
}

ring() {
    $arg_script &
    local bg_pid=$!

    snoozecheck
    pkill -P $bg_pid
    kill $bg_pid

    case "$user_input" in
        "$key_quit")
            echo
            exit
        ;;
        "$key_snooze")
            unixtime_alarm=$(date +"%s" -d "$snooze_time")
            human_alarm="$(date +"${human_format}" -d "$snooze_time")"
            clear
        ;;
    esac

    alrm
}

alrm() {
    local let seconds=2 # Anything greater than 1
    while [ $seconds -gt 1 ]
    do
        unixtime_now="$(date +%s)"
        human_now="$(date +"${human_format}")"
        let seconds="$unixtime_alarm - $unixtime_now"

        echo -en "${ansi_restore_cursor}"
        echo -en "${human_now}, $arg_script will loop every "
        echo -e "${read_timeout} seconds starting ${ansi_clr_line}"
        echo -en "${ansi_red}${human_alarm}${ansi_clr_colors} "
        echo -n '('; print_remaining $seconds; echo -e ")${ansi_clr_line}"

        if [ "$figlet" = "1" ]; then
            echo -e "$ansi_clr_line"
            figlet_time="$(date +"$figlet_format_time")"
            figlet_alarm=$(date +"$figlet_format_alarm" -d @$unixtime_alarm)

            figlet -c -f "$figlet_font" "$figlet_time"
            echo -en "${ansi_red}"
            echo
            figlet -c -f "$figlet_font" "$figlet_alarm"
            echo -en "${ansi_clr_colors}"
        fi

        readkey
        if [ "$user_input" = "$key_quit" ]; then
            echo
            exit
        fi
    done

    ring
}

if [ $# -ne 2 ]; then
    me="$(basename $0)"
    echo "Usage: $me <script path> <time>"
    echo
    echo "Examples:"
    echo "  $me ./test.bash 06:30"
    echo "  $me ~/.dalrm \"Friday 13:00\""
    echo "  $me \$(which ls) \"1 minute 10 seconds\""
    echo
    echo "^C or '$key_quit' exits; '$key_snooze' snoozes"
    echo
    echo "Install figlet (and fonts) to enhance the display"
    exit 0
fi

arg_script="$1"
arg_time="$2"

# Prepend './' to the specified script if no path (beginning with '/') is found
# Is this insecure? Hm
if [[ $arg_script != /* ]]; then 
    arg_script="./$arg_script"
fi

# Sanity checks
if [ ! -x "$arg_script" ]; then
    echo "\"$arg_script\": not executable, or doesn't exist" >&2
    exit 1
fi

date +"${human_format}" -d "$arg_time" > /dev/null 2>&1 || {
    echo -n "Failed to run \`date\` command: " >&2
    echo "date +\"${human_format}\" -d \"$arg_time\"" >&2
    date --version 2>&1 | head -n1 >&2
    exit 1
}

if which figlet > /dev/null 2>&1; then
    figlet=1
    # Switch to the stock figlet font if we fail to run figlet with the preset 
    if ! figlet -f "$figlet_font" fonttest > /dev/null 2>&1; then
        figlet_font="ascii9"
    fi
fi

unixtime_alarm=$(date +"%s" -d "$arg_time")
human_alarm="$(date +"${human_format}" -d "$arg_time")"

clear
echo -e "${ansi_save_cursor}"
alrm
